{
  "id": 146,
  "name": "Ripple",
  "fragment": "precision highp float;\nprecision highp int;\n\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\n\nvarying vec3 vNormal;\nvarying float light;\nuniform sampler2D wavetexture;\nvarying vec2 vUv;\n\nvoid main() {\n    vec2 uv = vUv;\n    vec4 ocean = texture2D( wavetexture, uv );\n    vec4 combine = vec4(clamp( highlightColor * highlightIntensity * light, 0.0, 1.0 ), 1.0 );\n    gl_FragColor = mix(ocean,combine,0.0);\n}\n",
  "vertex": "precision highp float;\nprecision highp int;\n\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nattribute vec3 position;\nattribute vec2 uv;\nattribute vec3 normal;\n\nuniform float time;\nuniform float speed;\nuniform float frequency;\nuniform float amplitude;\nuniform float lowerBound;\n\nvarying vec3 vNormal;\nvarying float light;\nvarying vec3 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n    \n    float taper = clamp( position.y, lowerBound, 1.0 );\n    vUv = uv;\n    // To achieve this effect, we look at the object from the top. Imagine we\n    // have a cross section of vertices. If it's a sphere, imagine it's the\n    // vertices around the equator. We need to animate those vertices as if\n    // the radius of the circle they lie on is undulating in a sine wave. To do\n    // that, we can simply move their points to or away from the center using\n    // vectors https://stackoverflow.com/questions/2353268/java-2d-moving-a-point-p-a-certain-distance-closer-to-another-point\n    // In this case, distance is is the sine wave. Then all we need to do is offset\n    // the sine wave by how far up/down we are vertex wise, aka the position.y\n    vec3 offset = normalize(\n        vec3( 0.0 ) - position ) * ( amplitude * sin( speed * time + position.y * frequency )\n    ) * taper;\n    \n    // We throw away the position.y value, which would offset the vertices up\n    // and down. We only want them to move \"in\" and \"out\"\n    vec3 newPosition = position + vec3( offset.x, 0.0, offset.z );\n\n    // To calculate the \"top\" of each undulation wave, simply add an offset\n    // to \"y\" of the above equation. 1.0 was arrived at through guesswork.\n    light = amplitude * sin( speed * time + 1.0 + position.y * frequency ) * taper;\n\n    vPosition = newPosition;\n    \n    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n\n}\n",
  "uniforms": {
    "amplitude": {
      "name": "amplitude",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "time": {
      "name": "time",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "speed": {
      "name": "speed",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "frequency": {
      "name": "frequency",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "highlightIntensity": {
      "name": "highlightIntensity",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "highlightColor": {
      "name": "highlightColor",
      "displayName": null,
      "type": "c",
      "glslType": "vec3",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "lowerBound": {
      "name": "lowerBound",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "wavetexture": {
      "name": "wavetexture",
      "displayName": null,
      "type": "t",
      "glslType": "sampler2D",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    }
  },
  "url": "http://shaderfrog.com/app/view/146",
  "user": {
    "username": "andrewray",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}